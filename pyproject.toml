[tool.black]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | Pipfile\.lock
)/
'''

[tool.codespell]
skip = '*.json,*.csv,*.xml,*google_drive_tree.txt'

[tool.isort]
profile = "black"

[tool.mypy]
ignore_missing_imports = true
exclude = ["_local_sandbox"]
show_error_codes = true
plugins = 'pydantic.mypy'
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true

[tool.pycln]
path = "*"
expand_stars = true
all = true
no_gitignore = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "--strict-markers", "--strict-config"]
xfail_strict = true
log_cli_level = "warning"
pythonpath = ["wg_utilities"]
testpaths = ["tests"]
env = [
]
filterwarnings = [
    "ignore::DeprecationWarning:boto.*:",
]
markers = [
    "mocked_operation_lookup: allows setting the mocks in the `mb3c` fixture",
    "upnp_value_path: file with content to set as the value in a `upnp_state_variable` fixture",
]

[tool.ruff]
# Longer line length to avoid throwing errors in case where black doesn't
# wrap the lines (e.g. a long URL).
line-length = 120
extend-select = [
    # https://github.com/charliermarsh/ruff#supported-rules
    "B", # Flake8 bugbear
    "C", # Flake8 comprehensions
    "D", # pydocstyle
    "ERA", # Eradicate commented out code
    "N", # PEP8 Naming
    "RUF", # Ruff-specific rules
    "UP", # PyUpgrade
    "W", # Pycodestyle warnings
]
extend-ignore = [
    "D107",  # public-init
    "D202",  # no-blank-line-after-function
    "D203",  # one-blank-line-before-class
    "D213",  # multi-line-summary-second-line
    "D400",  # first-line-end-with-period
    "D406",  # new-line-after-section-name
    "D407",  # dashed-underline-after-section
    "UP037"  # quoted-annotation
]

[tool.ruff.mccabe]
max-complexity = 20

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
]
