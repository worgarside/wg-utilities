[tool.poetry]
name = "wg-utilities"
version = "3.0.1"
description = "Loads of useful stuff for the things I do :)"

authors = ["Will Garside <worgarside@gmail.com>"]
include = ["wg_utilities/py.typed"]
license = "MIT"
maintainers = ["Will Garside <worgarside@gmail.com>"]
packages = [{ include = "wg_utilities" }]
readme = "README.md"
repository = "https://github.com/worgarside/wg-utilities"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

# Dependencies

[tool.poetry.dependencies]
python = "^3.10"
async-upnp-client = { version = "*", optional = true }
botocore = { version = "*", optional = true }
flask = { version = ">=2.0.2", optional = true }
"jetson.gpio" = { version = "*", markers = "sys_platform == 'linux'", optional = true  }
lxml = { version = "==4.9.2", optional = true }
pigpio = { version = "*", optional = true }
pillow = { version = "*", optional = true }
pydantic = { version = "*", optional = true }
pyjwt = { version = "~=2.6.0", optional = true }
python-dotenv = { version = "*", optional = true }
pytz = ">=2022.1"
requests = { version = ">=2.26.0", optional = true }
"rpi.gpio" = { version = "*", markers = "sys_platform == 'linux'" , optional = true }
spidev = { version = "*", markers = "sys_platform == 'linux'", optional = true  }
strenum = { version = "*", optional = true }
tzlocal = { version = "*", optional = true }
xmltodict = { version = "*", optional = true }

[tool.poetry.group.dev.dependencies]
black = "*"
pylint = "*"
pre-commit = "*"
twine = "==4.0.2"
mypy = "*"
types-requests = "*"
types-tzlocal = "*"
boto3-stubs = "*"
lxml-stubs = "*"
types-setuptools = "*"
pycln = "*"
pylint-strict-informational = "*"
pillow = "*"
pytest = "*"
pytest-env = "*"
requests-mock = "*"
coverage = "*"
freezegun = "*"
boto3 = "*"
mypy-boto3-s3 = "*"
mypy-boto3-lambda = "*"
mypy-boto3-pinpoint = "*"
moto = { extras = ["pinpoint"], version = "*" }
deepdiff = "*"
aioresponses = "*"
pytest-cov = "*"
pytest-randomly = "*"
pytest-aws-config = "*"
exceptiongroup = "*"
tomli = "*"
pytest-xdist = "*"


[tool.poetry.extras]
clients = [
    "flask",
    "pyjwt",
    "requests",
    "pytz",
    "tzlocal",
    "pydantic",
    "python-dotenv",
    "strenum",
]
"devices.epd" = ["spidev", "rpi.gpio", "Pillow"]
"devices.dht22" = ["pigpio"]
"devices.yamaha_yas_209" = ["async-upnp-client", "pydantic", "xmltodict"]
"exceptions" = ["python-dotenv", "requests"]
"functions" = ["lxml"]


# Tool Configs

[tool.black]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov-report=xml",
    "--cov=./",
    "-n",
    "auto",
]
xfail_strict = true
log_cli_level = "warning"
pythonpath = ["wg_utilities"]
testpaths = ["tests"]
env = []
filterwarnings = [
    "ignore::DeprecationWarning:boto.*:",
    "ignore::DeprecationWarning:pkg_resources.*:",
]
markers = [
    "mocked_operation_lookup: allows setting the mocks in the `mb3c` fixture",
    "upnp_value_path: file with content to set as the value in a `upnp_state_variable` fixture",
]

[tool.coverage.report]
exclude_lines = ["pragma: no cover", "def __repr__", "def __str__", "@overload"]

[tool.mypy]
ignore_missing_imports = true
exclude = ["_local_sandbox"]
show_error_codes = true
plugins = 'pydantic.mypy'
follow_imports = "silent"
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true

[tool.codespell]
skip = '*.json,*.csv,*.xml,*google_drive_tree.txt,*.lock'

[tool.pycln]
path = "*"
expand_stars = true
all = true
no_gitignore = false

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.ruff]
# Longer line length to avoid throwing errors in case where black doesn't
# wrap the lines (e.g. a long URL).
line-length = 120
select = [
    # https://github.com/charliermarsh/ruff#supported-rules
    "B",   # Flake8 bugbear
    "C4",  # Flake8 comprehensions
    "D",   # pydocstyle
    "E",   # Pycodestyle errors
    "ERA", # Eradicate commented out code
    "F",   # Pyflakes
    "N",   # PEP8 Naming
    "RUF", # Ruff-specific rules
    "UP",  # PyUpgrade
    "W",   # Pycodestyle warnings
]
ignore = [
    "D107",  # public-init
    "D202",  # no-blank-line-after-function
    "D203",  # one-blank-line-before-class
    "D213",  # multi-line-summary-second-line
    "D400",  # first-line-end-with-period
    "D406",  # new-line-after-section-name
    "D407",  # dashed-underline-after-section
    "UP037", # quoted-annotation
]

[tool.ruff.mccabe]
max-complexity = 20
