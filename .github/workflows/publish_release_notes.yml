---
name: Publish Release Notes

on:
  pull_request:
    types:
      - closed
    branches:
      - main
      - master

env:
  BUILD_PYTHON_VERSION: 3.10
  ENVIRONMENT: startsWith(github.ref, 'refs/tags') && 'production' || 'development'

jobs:
  cancel_if_not_merged:
    name: Cancel Workflow if Pull Request is not merged
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == false
    steps:
      - name: Cancel Workflow Run
        run: gh run cancel ${{ github.run_id }} --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Unit Tests
    uses: ./.github/workflows/python_unit_tests.yml
    with:
      branch: ${{ github.base_ref }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          cache: poetry
          python-version: ${{ env.BUILD_PYTHON_VERSION }}

      - name: Install Poetry
        run: pipx install poetry

      - name: Build
        run: poetry build

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist

  publish_release_notes:
    name: Publish Release Notes
    runs-on: ubuntu-latest
    needs:
      - build
      - test
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      deployments: write
      pages: write
    steps:
      - name: Get Release Metadata
        id: get-release-metadata
        run: |
          release_tag=$(echo $GITHUB_HEAD_REF | cut -d '/' -f2)

          if ! [[ $release_tag =~ ^[0-9]{1,2}\.[0-9]{1,4}\.[0-9]{1,4}$ ]]
          then
              echo "Release tag is invalid: \`$release_tag\`" >> $GITHUB_STEP_SUMMARY
              exit 1
          else
            echo "release-id=$(gh release view $release_tag \
            --json apiUrl \
            --repo ${{ github.repository }} \
            --jq '.apiUrl' | \
            cut -d '/' -f8 \
            )" >> $GITHUB_OUTPUT
            echo "release-tag=$release_tag" >> $GITHUB_OUTPUT
          fi

      - name: Log GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo -e "Release ID: \`${{ steps.get-release-metadata.outputs.release-id }}\`"
          echo -e "Tag: \`${{ steps.get-release-metadata.outputs.release-tag }}\`"
          echo -e "\`\`\`json\n$GITHUB_CONTEXT\n\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact

      - name: Upload Release Artifacts
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          tag: ${{ steps.get-release-metadata.outputs.release-tag }}
          overwrite: true
          file_glob: true

      - name: Point Release at `${{ github.base_ref }}`
        run: |
          gh release edit ${{ steps.get-release-metadata.outputs.release-tag }} \
           --target ${{ github.base_ref }} \
           --repo ${{ github.repository }}

      - name: Publish Release Notes
        uses: eregon/publish-release@v1
        with:
          release_id: ${{ steps.get-release-metadata.outputs.release-id }}

      - name: Clone Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}
          fetch-depth: 0

      - name: Delete Release Branch
        run: 'git push origin --delete $GITHUB_HEAD_REF || :'

  publish_to_pypi:
    name: Publish to PyPI
    needs:
      - build
      - publish_release_notes
      - test
    uses: ./.github/workflows/publish_release.yml
    with:
      environment: $ENVIRONMENT
      artifact: build-artifact
