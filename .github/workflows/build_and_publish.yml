---
name: Build & Publish

on:
  workflow_call:
    inputs:
      build_branch:
        description: 'The branch to build from'
        required: true
        type: string
      environment:
        description: 'The environment to deploy to'
        required: true
        type: string
      release_tag:
        description: 'The tag of the release to add the artifacts to'
        required: false
        type: string
    secrets:
      PYPI_API_TOKEN:
        description: 'The PyPi API token'
        required: true

env:
  BUILD_PYTHON_VERSION: '3.10'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.base_ref }}

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.BUILD_PYTHON_VERSION }}

      - name: Install Poetry
        run: pipx install poetry

      - name: Build
        run: poetry build

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist/

  add_artifacts_to_release_notes:
    if: ${{ inputs.release_tag && success() }}
    name: Add Artifacts to Release Notes
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist/

      - name: Upload Artifacts
        run: |
          gh release upload ${{ inputs.release_tag }} dist/* \
          --clobber \
          --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_to_pypi:
    name: Publish to PyPI
    environment: ${{ inputs.environment }}
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Summarise Environment
        run: |
          echo -e "Environment: \`${{ inputs.environment }}\`"
          echo -e "Build Branch: \`${{ inputs.build_branch }}\`"
          echo -e "Release Tag: \`${{ inputs.release_tag }}\`"

      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        continue-on-error: ${{ inputs.environment == 'development' }}
        with:
          # yamllint disable-line rule:line-length
          password: "${{ secrets.PYPI_API_TOKEN }}"
          repository-url: "${{ vars.REPOSITORY_URL }}"
