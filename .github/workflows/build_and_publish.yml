---
name: Build & Publish

on:
  workflow_call:
    inputs:
      build_branch:
        description: The branch to build from
        required: true
        type: string
      environment:
        description: The environment to deploy to
        required: true
        type: string
      release_tag:
        description: The tag of the release to add the artifacts to
        required: false
        type: string

env:
  BUILD_PYTHON_VERSION: '3.11'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.build_branch }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.BUILD_PYTHON_VERSION }}

      - name: Install Poetry
        run: pipx install poetry

      - name: Build
        run: poetry build

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: dist/

  add_artifacts_to_release_notes:
    if: ${{ inputs.release_tag && success() }}
    name: Add Artifacts to Release Notes
    runs-on: ubuntu-latest
    needs:
      - build
    outputs:
      pr-is-draft: ${{ steps.is-pr-draft.outputs.pr-is-draft }}
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist/

      - name: Upload Artifacts
        run: |
          gh release upload ${{ inputs.release_tag }} dist/* \
          --clobber \
          --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.WORGARSIDE_DEV_TOKEN }}

      - name: Check Release PR is not Draft
        id: is-pr-draft
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "pr-is-draft=$(
            gh pr list \
            --json baseRefName,headRefName,isDraft \
            --repo ${{ github.repository }} \
            --jq '
              .[] | select(
                .baseRefName == "main"
              ) | select(
                .headRefName == "release/${{ inputs.release_tag }}"
              ) | .isDraft
            '
          )" >> $GITHUB_OUTPUT

      - name: Summarise Environment
        run: |
          echo -e "Environment: \`${{ inputs.environment }}\`"
          echo -e "Build Branch: \`${{ inputs.build_branch }}\`"
          echo -e "Release Tag: \`${{ inputs.release_tag }}\`"
          echo -e "PR is Draft: \`${{ steps.is-pr-draft.outputs.pr-is-draft }}\`"

  publish_to_pypi:
    name: Publish to PyPI
    environment: ${{ inputs.environment }}
    if: |
      needs.add_artifacts_to_release_notes.outputs.pr-is-draft != 'true' &&
      success()
    needs:
      - add_artifacts_to_release_notes
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        continue-on-error: ${{ inputs.environment == 'development' }}
        with:
          # yamllint disable-line rule:line-length
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository-url: ${{ vars.REPOSITORY_URL }}
