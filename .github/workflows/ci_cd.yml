---
name: CI/CD

on:
  pull_request:
    types:
      - closed
    branches:
      - main
      - master

jobs:
  cancel_if_not_merged:
    name: Cancel Workflow if Pull Request is not merged
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == false
    steps:
      - name: Cancel Workflow Run
        run: gh run cancel ${{ github.run_id }} --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_release:
    name: Publish Release
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      deployments: write
      pages: write
    steps:
      - name: Get Release Metadata
        id: get-release-metadata
        run: |
          release_tag=$(echo $GITHUB_HEAD_REF | cut -d '/' -f2)
          echo "release-id=$(gh release view $release_tag \
           --json apiUrl \
           --repo ${{ github.repository }} \
           --jq '.apiUrl' | \
           cut -d '/' -f8 \
          )" >> $GITHUB_OUTPUT
          echo "release-tag=$release_tag" >> $GITHUB_OUTPUT

      - name: Log GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo -e "Release ID: \`${{ steps.get-release-metadata.outputs.release-id }}\`"
          echo -e "Tag: \`${{ steps.get-release-metadata.outputs.release-tag }}\`"
          echo -e "\`\`\`json\n$GITHUB_CONTEXT\n\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Point Release at `main`
        run: |
          gh release edit ${{ steps.get-release-metadata.outputs.release-tag }} \
           --target refs/heads/main \
           --repo ${{ github.repository }}

      - name: Publish Release
        uses: eregon/publish-release@v1
        with:
          release_id: ${{ steps.get-release-metadata.outputs.release-id }}

      - name: Clone Repository
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Delete Release Branch
        run: git push origin --delete $GITHUB_HEAD_REF
